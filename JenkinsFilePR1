#!groovy
import hudson.tasks.test.AbstractTestResultAction
import hudson.model.*
//import groovy.json.JsonOutput
//import groovy.json.JsonSlurper

def sendStatusToGit(status,description){
  /*def response = httpRequest consoleLogResponseBody: true,acceptType: 'APPLICATION_JSON',contentType: 'APPLICATION_JSON', httpMode: "POST", requestBody: "{\"state\":\"${status}\",\"description\":\"${description}\",\"context\":\"CI/Jenkins\"}",url: "https://${username}:${password}@api.github.com/repos/${ORG_NAME}/${REPO_NAME}/statuses/${GIT_COMMIT}"
  echo "${response}.getContent()"
  return response.geStatus() */
  sh "curl -H 'Content-Type:application/json' -X POST -d '{\"state\":\"${status}\",\"description\":\"${description}\",\"context\":\"CI/Jenkins\",\"target_url\":\"${BUILD_URL}\"}' https://${password}@api.github.com/repos/${ORG_NAME}/${REPO_NAME}/statuses/${GIT_COMMIT}"
}

def cleanUp(){
  // delete a dir if exists
  sh "rm -rf test"
  // kill the process if running
  sh "sudo pkill -f 'node server.js'"
}

pipeline{
	  parameters {
		  choice(name:'CONCORD_SLAVE', choices: ['concord-slave-1'], description: '')
			string(name:'BRANCH', defaultValue: 'master', description: '')
		}
		agent {
			node {label "${CONCORD_SLAVE}"}
		}
		environment {
			NODE_ENV = "${CONCORD_SLAVE == "concord-reno-prodvm" ? 'prod': 'dev'}"
      ORG_NAME = "Adi-org"
      REPO_NAME = "test"
		}
		stages{

        	stage("get git credentials"){
            steps{
                script{
                    try{
                      def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                      com.cloudbees.plugins.credentials.common.StandardUsernamePasswordCredentials.class,
                      jenkins.model.Jenkins.instance
                      )
                      def c = creds.findResult { it.id == 'concord-service-bot' ? it : null }
                      password = "${c.password}"
                    }
                    catch(Exception e){
						            sendStatusToGit('failure','The build is failed!')
                        echo "Get Credentials block failed with :"
                        throw e
                    }
                }
            }
        }
       
  			stage("Setup"){
						steps{
							script{
                try{    
                  // get PR details 
                  def commitPRDetails = sh (script : "curl -H 'Content-Type:application/json' -X GET  https://${password}@api.github.com/search/issues?q=sha:${GIT_COMMIT}",returnStdout: true).trim()
                  def commitPRDetailsJson = readJSON text:commitPRDetails
                  echo " Itemss  ${commitPRDetailsJson['items']}"
                  /*def parser = new JsonSlurper()
                  def json = parser.parseText(commitPRDetails)
                  //def json = JsonOutput.toJson(commitPRDetails)
                  def type = json.getClass()*/
                  //def list = sh (script : "ls -l",returnStdout: true).trim()
                  //sh "git clone https://${password}@github.com/Adi-org/test.git"
                  echo "heree  ..."
                  if(!commitPRDetailsJson['items'].isEmpty()){
                      cleanUp()
                      sh "git clone https://${password}@github.com/Adi-org/test.git"
                      echo "Here0 ${password}"
                      //"ls -l".execute()
                      //def clone =  sh (script:"git clone https://${password}@github.com/Adi-org/test.git",returnStdout: true)
                      echo "Here01"
                      buildFlag = false
                      dir("test"){
                          echo "Here1"
                          echo "Here2"
                          def branchDetails = sh (script : "curl -H 'Content-Type:application/json' -H 'Accept:application/vnd.github.groot-preview+json' -X GET  https://${password}@api.github.com/repos/${ORG_NAME}/${REPO_NAME}/commits/${GIT_COMMIT}/branches-where-head",returnStdout: true).trim()
                          def branchDetailsJson = readJSON text:branchDetails
                          def prBranch = branchDetailsJson[0]['name']
                          echo "Here3 ${prBranch}"
                          sh "git checkout ${prBranch}"
                          sh "git checkout ${BRANCH}"
                          sh 'git config --global user.email "adithya.bhat@nutanix.com"'
                          sh 'git config --global user.name "adithya-bhat"'
                          sh "git merge ${prBranch}"
                          sh "node server.js &"
                          buildFlag = true
                      }
                    
                  }
                  /*if(json.items[0].labels.isEmpty()){
                    echo "Labels is empty."
                  }*/
                  //echo " printing commit details cmd output branch 4 ${json.items}" 
                  /*echo "${GITHUB_PR_HEAD_SHA}"
                  echo "${BUILD_URL}"
                  echo "${GIT_COMMIT}"
                  echo " ${GIT_BRANCH}"
                  echo " ${GIT_LOCAL_BRANCH}"
                  echo "${env.BRANCH_NAME}"
                  echo "${env.CHANGE_BRANCH}"
                  echo "${env.CHANGE_TARGET}"
                  echo env.ghprbTargetBranch
                  final scmVars = checkout(scm)
                  echo "scmVars: ${scmVars}"
                  sh "git clone https://${username}:${password}@github.com/adithya-bhat/hello-world.git"
                  dir("hello-world"){
                    sh "git checkout ${BRANCH}"
                  } */
                  //
                  
                  //sh "git checkout ${BRANCH}" 
                }               
                catch(Exception e){
                  //setGitHubPullRequestStatus(context:"CI/Jenkins",message:"Build is failed!",state:"FAILURE")
                  //sendStatusToGit('failure','The build is failed!')
                  echo "Setup block failed."
                  throw e
                }
							}
						}
						post{
							success{
                script{
                    if (buildFlag){
                        sendStatusToGit('success','The build is successful!')
                        echo "SUCCESS: test build"
                    }
                    else{
                        echo "SUCCESS: test build is not done since there's no PR raised."
                    }
                }
                
                //setGitHubPullRequestStatus(context:"CI/Jenkins",message:"Build is successfull!",state:"SUCCESS")
                
                /*script{
                  sendStatusToGit('success','The build is successful!')
                  //echo "Response from the github for the status is ${response}"
                }*/
                
							}

							failure{
                //setGitHubPullRequestStatus(context:"CI/Jenkins",message:"Build is failed!",state:"FAILURE")
                /*script{
                  sendStatusToGit('failure','The build is failed!')
                  //echo "Response from the github for the status is ${response}"
                }*/
                sendStatusToGit('failure','The build is failed!')
                echo "FAILURE: test build."

							}
						}
					}
		}
}
